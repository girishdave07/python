# -*- coding: utf-8 -*-
"""python_swayam_assignment_and_practice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q0IOnVWEwbzRJFDBb5ks4mKR8ne5uBVt
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib as plt
# %pylab

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

t=linspace(-pi,pi,100)
plt.plot(t,cos(t))  #Cosine = Adjacent / Hypotenuse 
plt.show()

x=t
plt.plot(t,(sin(x)*sin(x))/x) #Sine = Opposite / Hypotenuse Tangent = Opposite / Adjacent

len(t)

title("x vs cos(x) with red line and width =3")
xlabel(r"$x$")
ylabel(r"$y$")
annotate("root",xy=(0,-1))
plt.plot(x,cos(x),'r',linewidth=3)

a=linspace(-pi,pi,100)
plt.plot(a)

x = np.linspace(0, 10, 100)

fig = plt.figure()
plt.plot(x, np.sin(x), '-')
plt.plot(x, np.cos(x), '--');
plt.figure()  # create a plot figure

# create the first of two panels and set current axis
plt.subplot(2, 1, 1) # (rows, columns, panel number)
plt.plot(x, np.sin(x))

# create the second panel and set current axis
plt.subplot(2, 1, 2)
plt.plot(x, np.cos(x));

plt.plot(t,sin(x))
plt.savefig('sinplt.eps', format='eps')

plt.plot(t,sin(x))
plt.savefig('sinplt.pdf', format='pdf')

plt.plot(t,sin(x))
plt.savefig('sinplt.ps', format='ps')

plt.plot(t,sin(x))
plt.savefig('sinplt.svg', format='svg')

plt.plot(t,sin(x))
plt.savefig('sinplt.png', format='png')

linspace(1,100,100)

linspace(-pi,pi,100)

linspace(-pi/2,pi/2,100)

linspace(-pi,pi,100,endpoint=False)

print("hello")

a=10
print(a)

a="hello"
print(a)
a=10
print(a)

a=int(input("enter your number1:-"))
print (a)
b=int(input("enter yur number2"))
print(b)
c=a+b
print(c)

import datetime

date=datetime.datetime.now()

date

squares=[1,4,9,16,25]
squares

x=[1,5,8]

a=0
b=1
x.append(3)
while a < 10:
    print(a)
    a, b = b, a+b

a,b=0,1
while a<10:
  print (a)
  a,b=b,a+b

x=int(input("please input an integer:"))
if(x<0):
  x=0
  print('negative changed to zero')
elif(x==0):
  print('zero')
elif(x==1):
  print('single')
else:
  print('more')

words=['cat','window','defenestrate']
for w in words:
  print(w,len(w))

for w in words[:]:  # Loop over a slice copy of the entire list.
     if len(w) > 6:
       words.insert(0, w)

a=['many','had','a','little','lamb']
for i in range(len(a)):
  print(i,a[i])

for n in range(2,10):
  for x in range(2,n):
    if n%x==0:
      print(n,'equals',x,'*',n//x)
      break
  else:
      print(n,'is a prime number')

for num in range (2,10):
  if num % 2 ==0:
    print("found an even number",num)
    continue
  print("found a number",num)

a=1
while a<100:
  a=a+1
  if a != 5:
    pass
  else:
   print(a)

class MyEmptyClass:
  pass

def initlog(*args):
  pass

def fib(n):
  a,b=0,1
  while a<n:
    print(a,end=',')
    a,b=b,a+b
  print()
fib(2000)

def fib2(n):
  result=[]
  a,b=0,1
  while (a<n):
    result.append(a)
    a,b=b,a+b
  return result
f100=fib2(100)
f100

def ask_ok(prompt,retries=4,reminder='Please try again!'):
  while True:
    ok=input(prompt)
    if ok in('y','ye','yes'):
      return True
    if ok in('n','no','nop','nope'):
      return False
    retries=retries-1
    if retries<0:
      raise ValueError('invalid user response')
    print(reminder)

i=5
def f(arg=i):
  print (arg)
i=6
f()

def f(a,L=[]):
  L.append(a)
  return L
print(f(1))
print(f(2))
print(f(3))

def f(a,L=None):
  if L is None:
    L=[]
  L.append(a)
  return L

def fib(n):
  a,b=0,1
  while a<n:
    print(a, end=' ')
    a,b=b,a+b
  print()
fib(2000)

fib

f=fib
f(100)

fib(0)
print(fib(0))

def fib2(n):
  result=[]
  a,b=0,1
  while a<n:
    result.append(a)
  return result
f100=fib(100)
f100

combs=[]
for x in [1,2,3]:
  for y in [3,1,4]:
    if x !=y:
      combs.append((x,y))
combs

vec=[-4,-2,0,2,4]
[x*2 for x in vec]

matrix=[
    [1,2,3,4],
    [5,6,7,8],
    [9,10,11,12],
]
[y*2 for y in matrix ]

matrix=[
    [1,2,3,4],
    [5,6,7,8],
    [9,10,11,12],
]
[[row[i] for row in matrix] for i in range(4)]
transposed=[]
for i in range(4):
  transposed.append([row[i] for row in matrix])
transposed

list(zip(*matrix))

a=set('abrakadabra')
b=set('alacazam')
a

a-b

a|b

a&b

a^b

tel={'jack':4098,'sape':4193}
tel['guido']=4127
tel

tel['irv']=4127
tel

list(tel)

sorted(tel)

'guido' in tel

'jack' not in tel

dict([('sape',4139),('guido',4127),('jack',4098)])

{x:x**2 for x in (2,4,6)}

dict(sape=4139,guido=4127,jack=4098)

knights={'gallahad':'the pure','robin':'the brave'}
for k,v in knights.items():
    print(k,v)

for i,v in enumerate(['tic','tac','toe']):
  print(i,v)

quetions=['name','quest','favorite color']
answers=['lancelot','the holy grail','blue']
for q,a in zip(quetions,answers):
  print('what is your {0}? it is {1}.'.format(q,a))

for i in reversed (range(1,10,2)):
  print(i)

basket=['apple','orange','apple','pear','orange','banana']
for f in sorted(set(basket)):
  print(f)

import math
raw_data=[56.6,float('NaN'),51.7,55.3,52.2,float('NaN'),47.8]
filtered_data=[]
for value in raw_data:
  if not math.isnan(value):
    filtered_data.append(value)
filtered_data

import sys
sys.ps1

sys.ps2

sys.ps1='c>'

print('Yuck!')

import sys

import json
json.dumps([1,'simple','list'])

f=open('workfile','w+')
json.dump(x,f)

while True:
  try:
    x=int(input("please enter a number: "))
    break
  except ValueError:
    print("Oops! That was no valid number. Try again...")

import unittest
from test import support
class TestFuncAcceptsSequencesMixin:

    func = fib2

    def test_func(self):
        self.func(self.arg)

class AcceptLists(TestFuncAcceptsSequencesMixin, unittest.TestCase):
    arg = [1, 2, 3]

class AcceptStrings(TestFuncAcceptsSequencesMixin, unittest.TestCase):
    arg = 'abc'

class AcceptTuples(TestFuncAcceptsSequencesMixin, unittest.TestCase):
    arg = (1, 2, 3)